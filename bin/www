#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app2:server');
var http = require('http');
const https = require('https');
const fs = require('fs');
const WebSocket = require('ws');
const path = require('path');

const __DIR = path.join(__dirname,'..', 'public');
// const options = {
//   key: fs.readFileSync('openssl/key.pem'),
//   cert: fs.readFileSync('openssl/cert.pem')
// };



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);
// var httpsServer = https.createServer(options, app);

const wsHttpsServer = https.createServer({
  key: fs.readFileSync('openssl/key.pem'),
  cert: fs.readFileSync('openssl/cert.pem')
});

const wss = new WebSocket.Server({
  port: 8080,
  perMessageDeflate: {
    zlibDeflateOptions: {
      // See zlib defaults.
      chunkSize: 1024,
      memLevel: 7,
      level: 3
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024
    },
    // Other options settable:
    clientNoContextTakeover: true, // Defaults to negotiated value.
    serverNoContextTakeover: true, // Defaults to negotiated value.
    serverMaxWindowBits: 10, // Defaults to negotiated value.
    // Below options specified as default values.
    concurrencyLimit: 10, // Limits zlib concurrency for perf.
    threshold: 1024 // Size (in bytes) below which messages
    // should not be compressed.
  }});

  let messages = {};
  let messagesAll = [];
  let textedMsgs;
  
  
  fs.readdir(__DIR, (err, files) => {
    let fileDate = [];
    files = files.join(',');
    if (files.includes('messages')) {
      let data = fs.readFileSync(__DIR + '/messages.txt', 'utf8');
      textedMsgs = data.split('_EOL_');
    } else {
      fs.writeFile(__DIR + '/messages.txt', '', err => {
        if (err) throw err;
        console.log('File is created successfully.');
      });
    }
  
  
    wss.on('connection', function connection(ws, req) {
      const ip = req.connection.remoteAddress;
  
      console.log(textedMsgs);
  
      wss.clients.forEach(function each(client) {
        if (client == ws && client.readyState === WebSocket.OPEN) {
          client.send(wss.clients.size - 1, 'connection opened');
          if (textedMsgs.length > 0) {
            textedMsgs.forEach(msg => {
              client.send(msg);
            });
          }
          // if (messagesAll.length > 0){
          //   messagesAll.forEach( msg=>{
          //     client.send(msg);
          //   });
          // }
  
          console.log(wss.clients.size - 1, ' connection opened');
        }
      });
  
      ws.on('message', function incoming(message) {
        if (Object.keys(messages) != ip) {
          messages[ip] = [];
        }
        messages[ip].push(message);
        // messagesAll.push(ip + ' : ' + message);
        fs.appendFile(__DIR + '/messages.txt', ip + ' : ' + message + '_EOL_ \r\n', function (err) {
          if (err) throw err;
          console.log('Saved!');
        });
  
        wss.clients.forEach(function each(client) {
          if (client.readyState === WebSocket.OPEN) {
            console.log('received: %s', messages[ip]);
            client.send(ip + ' : ' + message);
          }
  
        });
      });
  
      ws.on('open', function open() {
        ws.send('open something');
      });
  
    });
  });
  
  
  function noop() {}
  
  function heartbeat() {
    this.isAlive = true;
  }
  
  wss.on('connection', function connection(ws) {
    ws.isAlive = true;
    ws.on('pong', heartbeat);
  });
  
  const interval = setInterval(function ping() {
    wss.clients.forEach(function each(ws) {
      if (ws.isAlive === false) return ws.terminate();
  
      ws.isAlive = false;
      ws.ping(noop);
    });
  }, 30000);
  
  wss.on('close', function close() {
    clearInterval(interval);
  });

// wsHttpsServer.listen(8080);

/**
 * Listen on provided port, on all network interfaces.
 */
httpServer.listen(port, function(){
  console.log('listening on *:' + port);
});
httpServer.on('error', onError);
httpServer.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
